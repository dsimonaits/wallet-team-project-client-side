{"version":3,"file":"static/js/900.6e9bd947.chunk.js","mappings":"+TAyHA,EAlGkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAAsCC,EAAAA,EAAAA,WAAS,GAAM,eAA9CC,EAAW,KAAEC,EAAc,KAE5BC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaE,QAAQC,WAC5BC,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,iCACPC,IAAI,GAAI,mDACRC,QACC,kEACA,gDAEDJ,aAiBL,OACE,SAAC,KAAM,CACLK,cAAe,CACbN,MAAO,GACPE,SAAU,IAEZK,iBAAkBV,EAClBW,SArBa,SAACC,EAAO,GAAoB,IAAjBC,EAAS,EAATA,UACpBC,EAAMrB,EAASsB,EAAAA,GAAAA,MAAiBH,IAElCE,EAAIE,OAAyB,MAAhBF,EAAIG,QACnBC,EAAAA,GAAAA,QAAc,8BAELJ,EAAIE,MACbE,EAAAA,GAAAA,QAAc,gDAIhBL,GACF,EASuB,SAElB,gBAAGM,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAcR,EAAM,EAANA,OAAM,OACpC,SAAC,KAAa,WACZ,UAAC,KAAI,CAACD,SAAUQ,EAAa,WAC3B,SAAC,KAAa,WACZ,SAACE,EAAA,EAAI,OAEP,UAAC,KAAS,YACR,SAAC,KAAS,CACRC,KAAK,QACLC,KAAK,QACLC,MAAOZ,EAAOT,MACdsB,SAAUL,EACVM,YAAY,YAEd,SAAC,IAAQ,KACT,SAAC,KAAY,CACXH,KAAK,QACLI,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAS,UAAEA,GAAgB,QAI/C,UAAC,KAAS,YACR,SAAC,KAAS,CACRN,KAAMxB,EAAc,OAAS,WAC7ByB,KAAK,WACLC,MAAOZ,EAAOP,SACdoB,SAAUL,EACVM,YAAY,cAEd,SAAC,KAAY,KACb,SAACG,EAAA,EAAa,CACZP,KAAK,SACLvB,eAAgBA,EAChBD,YAAaA,KAEf,SAAC,KAAY,CACXyB,KAAK,WACLI,OAAQ,SAAAC,GAAG,OAAI,SAAC,IAAS,UAAEA,GAAgB,QAG/C,SAAC,KAAW,CAACN,KAAK,SAAQ,qBAC1B,SAAC,KAAY,CACXA,KAAK,SACLQ,QAAS,WACPnC,EAAS,YACX,EAAE,0BAKQ,GAIxB,E,6BC1FA,EAjBkB,WAChB,OACE,SAAC,KAAO,WACN,UAAC,KAAa,YACX,SAAC,IAAK,CAACoC,QAASC,EAAAA,EAAa,SACvB,SAAAxB,GAAO,OAAKA,EAAQyB,QAAUzB,EAAQ0B,WAAa,UAAC,KAAY,YACnE,SAAC,KAAe,KAClB,SAAC,KAAK,4BACO,KAET,SAAC,KAAW,WACV,SAAC,EAAS,UAK1B,C","sources":["components/LoginForm/LoginForm.jsx","pages/auth/LoginPage.jsx"],"sourcesContent":["import { React, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport { toast } from 'react-toastify';\nimport Logo from 'components/Logo/Logo';\nimport ShowPwdButton from 'components/ShowPwdButton/ShowPwdButton';\nimport {\n  FormContainer,\n  Form,\n  FormField,\n  FormLabel,\n  LogoContainer,\n  ErrorText,\n  IconMail,\n  IconPassword,\n  FirstButton,\n  SecondButton,\n} from 'components/LoginForm/LoginForm.styled';\n\nimport operations from 'redux/session/sessionOperations';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [isRevealPwd, setIsRevealPwd] = useState(false);\n\n  const schema = yup.object().shape({\n    email: yup.string().email().required(),\n    password: yup\n      .string()\n      .min(8, 'must be at least 8 characters')\n      .max(12, 'password length must be less than 13 characters')\n      .matches(\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])(?!.*\\s).{6,12}$/,\n        'must contain a letter, a number and a symbol'\n      )\n      .required(),\n  });\n\n  const onSubmit = (values, { resetForm }) => {\n    const res = dispatch(operations.logIn(values));\n\n    if (res.error && res.payload === 401) {\n      toast.warning('Email or password is wrong');\n      return;\n    } else if (res.error) {\n      toast.warning('Sorry, something is wrong, please, try again');\n      return;\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={schema}\n      onSubmit={onSubmit}\n    >\n      {({ handleSubmit, handleChange, values }) => (\n        <FormContainer>\n          <Form onSubmit={handleSubmit}>\n            <LogoContainer>\n              <Logo />\n            </LogoContainer>\n            <FormLabel>\n              <FormField\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"E-mail\"\n              />\n              <IconMail />\n              <ErrorMessage\n                name=\"email\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n\n            <FormLabel>\n              <FormField\n                type={isRevealPwd ? 'text' : 'password'}\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                placeholder=\"Password\"\n              />\n              <IconPassword />\n              <ShowPwdButton\n                type=\"button\"\n                setIsRevealPwd={setIsRevealPwd}\n                isRevealPwd={isRevealPwd}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n            <FirstButton type=\"submit\">Log In</FirstButton>\n            <SecondButton\n              type=\"button\"\n              onClick={() => {\n                navigate('/register');\n              }}\n            >\n              Register\n            </SecondButton>\n          </Form>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport Media from 'react-media';\nimport mediaQueries from '../../utils/media';\nimport {\n    Section,\n    PageContainer,\n    ImgContainer,\n    ImgWrapperLogin,\n    Title,\n    FormWrapper,\n} from './AuthPages.styled';\n\nconst LoginPage = () => {\n  return (\n    <Section>\n      <PageContainer>\n         <Media queries={mediaQueries}>\n              {matches => (matches.tablet || matches.desktop) &&  <ImgContainer>\n            <ImgWrapperLogin />\n          <Title>Finance App</Title>\n        </ImgContainer>}\n            </Media>       \n              <FormWrapper>\n                <LoginForm />   \n              </FormWrapper>\n          </PageContainer>        \n     </Section>\n  );\n};\nexport default LoginPage;"],"names":["dispatch","useDispatch","navigate","useNavigate","useState","isRevealPwd","setIsRevealPwd","schema","yup","shape","email","required","password","min","max","matches","initialValues","validationSchema","onSubmit","values","resetForm","res","operations","error","payload","toast","handleSubmit","handleChange","Logo","type","name","value","onChange","placeholder","render","msg","ShowPwdButton","onClick","queries","mediaQueries","tablet","desktop"],"sourceRoot":""}