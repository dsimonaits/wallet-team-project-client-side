{"version":3,"file":"static/js/951.2038ea54.chunk.js","mappings":"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","sources":["components/RegForm/PasswordStrengthMeter.jsx","components/RegForm/RegForm.jsx","pages/auth/RegistrationPage.jsx"],"sourcesContent":["import React from 'react';\nimport zxcvbn from 'zxcvbn';\n\nconst PasswordStrengthMeter = ({ password }) => {\n  const testResult = zxcvbn(password);\n  const num = testResult.score * 100/4;\n\n  \n  const funcProgressColor = () => {\n    switch(testResult.score) {\n      case 0:\n        return '#828282';\n      case 1:\n        return '#EA1111';\n      case 2:\n        return '#FFAD00';\n      case 3:\n        return '#9bc158';\n      case 4:\n        return '#00b500';\n      default:\n        return 'none';\n    }\n  }\n\n  const changePasswordColor = () => ({\n    width: `${num}%`,\n    background: funcProgressColor(),\n    height: '7px'\n  })\n\n  return (\n    <>\n      <div className=\"progress\" style={{ height: '7px' }}>\n        <div className=\"progress-bar\" style={changePasswordColor()}></div>\n      </div>\n      </>\n  )\n}\n\nexport default PasswordStrengthMeter;","import { React, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport Logo from 'components/Logo/Logo';\nimport PasswordStrengthMeter from './PasswordStrengthMeter';\nimport ShowPwdButton from 'components/ShowPwdButton/ShowPwdButton';\nimport {\n  FormContainer,\n  Form,\n  FormField,\n  FormLabel,\n  LogoContainer,\n  ErrorText,\n  IconMail,\n  IconPassword,\n  IconName,\n  ErrorTextConfirm,\n  FirstButton,\n  SecondButton,\n} from 'components/LoginForm/LoginForm.styled';\nimport { toast } from 'react-toastify';\n\nimport operations from 'redux/session/sessionOperations';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [password, setPassword] = useState('');\n  const [isRevealPwd, setIsRevealPwd] = useState(false);\n  const [showConfirmPassword, setConfirmShowPassword] = useState(false);\n\n  const schema = yup.object().shape({\n    email: yup.string().email().required(),\n    password: yup\n      .string()\n      .min(6, 'must be at least 6 characters')\n      .max(12, 'password length must be less than 12 characters')\n      .matches(\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])(?!.*\\s).{6,12}$/,\n        'must contain a letter, a number and a symbol'\n      )\n      .required(),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref('password'), null], 'passwords need to be the same')\n      .required(),\n    name: yup\n      .string()\n      .min(1, 'must min length 1')\n      .max(12, 'must max length 12')\n      .required(),\n  });\n\n  const onSubmit = (values, { resetForm }) => {\n    const { email, password, name } = values;\n    const res = dispatch(operations.register({ email, password, name }));\n\n    if (res.error && res.payload === 409) {\n      toast.error(`was registered before`);\n      return;\n    } else if (res.error) {\n      toast.error('Something went wrong! Please, try again');\n      return;\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n        confirmPassword: '',\n        name: '',\n      }}\n      validationSchema={schema}\n      onSubmit={onSubmit}\n    >\n      {({ handleSubmit, handleChange, values }) => (\n        <FormContainer>\n          <Form onSubmit={handleSubmit}>\n            <LogoContainer>\n              <Logo />\n            </LogoContainer>\n            <FormLabel>\n              <FormField\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"E-mail\"\n              />\n              <IconMail />\n              <ErrorMessage\n                name=\"email\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n            <FormLabel>\n              <FormField\n                type={isRevealPwd ? 'text' : 'password'}\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                placeholder=\"Password\"\n                onInput={evt => setPassword(evt.target.value)}\n              />\n              <IconPassword />\n              <ShowPwdButton\n                type=\"button\"\n                setIsRevealPwd={setIsRevealPwd}\n                isRevealPwd={isRevealPwd}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n\n            <FormLabel>\n              <FormField\n                type={showConfirmPassword ? 'text' : 'password'}\n                name=\"confirmPassword\"\n                value={values.confirmPassword}\n                onChange={handleChange}\n                placeholder=\"Confirm password\"\n              />\n              <IconPassword />\n              <ShowPwdButton\n                type=\"button\"\n                setIsRevealPwd={setConfirmShowPassword}\n                isRevealPwd={showConfirmPassword}\n              />\n\n              <PasswordStrengthMeter password={password} />\n              <ErrorMessage\n                name=\"confirmPassword\"\n                render={msg => <ErrorTextConfirm>{msg}</ErrorTextConfirm>}\n              />\n            </FormLabel>\n            <FormLabel>\n              <FormField\n                type=\"text\"\n                name=\"name\"\n                value={values.username}\n                onChange={handleChange}\n                placeholder=\"First name\"\n              />\n              <IconName />\n              <ErrorMessage\n                name=\"name\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n            <FirstButton type=\"submit\">Register</FirstButton>\n            <SecondButton\n              type=\"button\"\n              onClick={() => {\n                navigate('/login');\n              }}\n            >\n              Log In\n            </SecondButton>\n          </Form>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from '../../components/RegForm/RegForm'\nimport Media from 'react-media';\nimport mediaQueries from '../../utils/media';\nimport {\n    Section,\n    PageContainer,\n    ImgContainer,\n    ImgWrapperReg,\n    Title,\n    FormWrapper,\n} from './AuthPages.styled';\n\nconst RegistrationPage = () => {\n  return (\n    <Section>\n      <PageContainer>\n         <Media queries={mediaQueries}>\n              {matches => (matches.tablet || matches.desktop) &&  <ImgContainer>\n            <ImgWrapperReg />\n          <Title>Finance App</Title>\n        </ImgContainer>}\n            </Media>     \n              <FormWrapper>\n                 <RegisterForm />   \n              </FormWrapper>\n          </PageContainer>        \n     </Section>\n  );\n};\nexport default RegistrationPage;"],"names":["_ref","password","testResult","zxcvbn","num","score","funcProgressColor","_jsx","_Fragment","children","className","style","height","width","concat","background","dispatch","useDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","setPassword","_useState3","_useState4","isRevealPwd","setIsRevealPwd","_useState5","_useState6","showConfirmPassword","setConfirmShowPassword","schema","yup","shape","email","required","min","max","matches","confirmPassword","oneOf","name","Formik","initialValues","validationSchema","onSubmit","values","resetForm","res","operations","error","payload","toast","_ref2","handleSubmit","handleChange","FormContainer","_jsxs","Form","LogoContainer","Logo","FormLabel","FormField","type","value","onChange","placeholder","IconMail","ErrorMessage","render","msg","ErrorText","onInput","evt","target","IconPassword","ShowPwdButton","PasswordStrengthMeter","ErrorTextConfirm","username","IconName","FirstButton","SecondButton","onClick","Section","PageContainer","Media","queries","mediaQueries","tablet","desktop","ImgContainer","ImgWrapperReg","Title","FormWrapper","RegisterForm"],"sourceRoot":""}