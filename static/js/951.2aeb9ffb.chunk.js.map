{"version":3,"file":"static/js/951.2aeb9ffb.chunk.js","mappings":"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","sources":["components/RegForm/PasswordStrengthMeter.jsx","components/RegForm/RegForm.jsx","pages/auth/RegistrationPage.jsx"],"sourcesContent":["import React from 'react';\nimport zxcvbn from 'zxcvbn';\n\nconst PasswordStrengthMeter = ({ password }) => {\n  const testResult = zxcvbn(password);\n  const num = testResult.score * 100/4;\n\n  \n  const funcProgressColor = () => {\n    switch(testResult.score) {\n      case 0:\n        return '#828282';\n      case 1:\n        return '#EA1111';\n      case 2:\n        return '#FFAD00';\n      case 3:\n        return '#9bc158';\n      case 4:\n        return '#00b500';\n      default:\n        return 'none';\n    }\n  }\n\n  const changePasswordColor = () => ({\n    width: `${num}%`,\n    background: funcProgressColor(),\n    height: '7px'\n  })\n\n  return (\n    <>\n      <div className=\"progress\" style={{ height: '7px' }}>\n        <div className=\"progress-bar\" style={changePasswordColor()}></div>\n      </div>\n      </>\n  )\n}\n\nexport default PasswordStrengthMeter;","import { React, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport Logo from 'components/Logo/Logo';\nimport PasswordStrengthMeter from './PasswordStrengthMeter';\nimport ShowPwdButton from 'components/ShowPwdButton/ShowPwdButton';\nimport {\n  FormContainer,\n  Form,\n  FormField,\n  FormLabel,\n  LogoContainer,\n  ErrorText,\n  IconMail,\n  IconPassword,\n  IconName,\n  ErrorTextConfirm,\n  FirstButton,\n  SecondButton,\n} from 'components/LoginForm/LoginForm.styled';\nimport { toast } from 'react-toastify';\n\nimport operations from 'redux/session/sessionOperations';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [password, setPassword] = useState('');\n  const [isRevealPwd, setIsRevealPwd] = useState(false);\n  const [showConfirmPassword, setConfirmShowPassword] = useState(false);\n\n  const schema = yup.object().shape({\n    email: yup.string().email().required(),\n    password: yup\n      .string()\n      .min(6, 'must be at least 6 characters')\n      .max(12, 'password length must be less than 12 characters')\n      .matches(\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])(?!.*\\s).{8,}$/,\n        'must contain a letter, a number and a symbol'\n      )\n      .required(),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref('password'), null], 'passwords need to be the same')\n      .required(),\n    name: yup\n      .string()\n      .min(1, 'must min length 1')\n      .max(12, 'must max length 12')\n      .required(),\n  });\n\n  const onSubmit = (values, { resetForm }) => {\n    const { email, password, name } = values;\n    const res = dispatch(operations.register({ email, password, name }));\n\n    if (res.error && res.payload === 409) {\n      toast.error(`was registered before`);\n      return;\n    } else if (res.error) {\n      toast.error('Something went wrong! Please, try again');\n      return;\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n        confirmPassword: '',\n        name: '',\n      }}\n      validationSchema={schema}\n      onSubmit={onSubmit}\n    >\n      {({ handleSubmit, handleChange, values }) => (\n        <FormContainer>\n          <Form onSubmit={handleSubmit}>\n            <LogoContainer>\n              <Logo />\n            </LogoContainer>\n            <FormLabel>\n              <FormField\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"E-mail\"\n              />\n              <IconMail />\n              <ErrorMessage\n                name=\"email\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n            <FormLabel>\n              <FormField\n                type={isRevealPwd ? 'text' : 'password'}\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                placeholder=\"Password\"\n                onInput={evt => setPassword(evt.target.value)}\n              />\n              <IconPassword />\n              <ShowPwdButton\n                type=\"button\"\n                setIsRevealPwd={setIsRevealPwd}\n                isRevealPwd={isRevealPwd}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n\n            <FormLabel>\n              <FormField\n                type={showConfirmPassword ? 'text' : 'password'}\n                name=\"confirmPassword\"\n                value={values.confirmPassword}\n                onChange={handleChange}\n                placeholder=\"Confirm password\"\n              />\n              <IconPassword />\n              <ShowPwdButton\n                type=\"button\"\n                setIsRevealPwd={setConfirmShowPassword}\n                isRevealPwd={showConfirmPassword}\n              />\n\n              <PasswordStrengthMeter password={password} />\n              <ErrorMessage\n                name=\"confirmPassword\"\n                render={msg => <ErrorTextConfirm>{msg}</ErrorTextConfirm>}\n              />\n            </FormLabel>\n            <FormLabel>\n              <FormField\n                type=\"text\"\n                name=\"name\"\n                value={values.username}\n                onChange={handleChange}\n                placeholder=\"First name\"\n              />\n              <IconName />\n              <ErrorMessage\n                name=\"name\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n            <FirstButton type=\"submit\">Register</FirstButton>\n            <SecondButton\n              type=\"button\"\n              onClick={() => {\n                navigate('/login');\n              }}\n            >\n              Log In\n            </SecondButton>\n          </Form>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from '../../components/RegForm/RegForm'\nimport Media from 'react-media';\nimport mediaQueries from '../../utils/media';\nimport {\n    Section,\n    PageContainer,\n    ImgContainer,\n    ImgWrapperReg,\n    Title,\n    FormWrapper,\n} from './AuthPages.styled';\n\nconst RegistrationPage = () => {\n  return (\n    <Section>\n      <PageContainer>\n         <Media queries={mediaQueries}>\n              {matches => (matches.tablet || matches.desktop) &&  <ImgContainer>\n            <ImgWrapperReg />\n          <Title>Finance App</Title>\n        </ImgContainer>}\n            </Media>     \n              <FormWrapper>\n                 <RegisterForm />   \n              </FormWrapper>\n          </PageContainer>        \n     </Section>\n  );\n};\nexport default RegistrationPage;"],"names":["password","testResult","zxcvbn","num","score","funcProgressColor","className","style","height","width","background","dispatch","useDispatch","navigate","useNavigate","useState","setPassword","isRevealPwd","setIsRevealPwd","showConfirmPassword","setConfirmShowPassword","schema","yup","shape","email","required","min","max","matches","confirmPassword","oneOf","name","initialValues","validationSchema","onSubmit","values","resetForm","res","operations","error","payload","toast","handleSubmit","handleChange","Logo","type","value","onChange","placeholder","render","msg","onInput","evt","target","ShowPwdButton","username","onClick","queries","mediaQueries","tablet","desktop"],"sourceRoot":""}