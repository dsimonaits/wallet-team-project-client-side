{"version":3,"file":"static/js/900.3b8d52d8.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/auth/LoginPage.jsx"],"sourcesContent":["import { React, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport { toast } from 'react-toastify';\nimport Logo from 'components/Logo/Logo';\nimport ShowPwdButton from 'components/ShowPwdButton/ShowPwdButton';\nimport {\n  FormContainer,\n  Form,\n  FormField,\n  FormLabel,\n  LogoContainer,\n  ErrorText,\n  IconMail,\n  IconPassword,\n  FirstButton,\n  SecondButton,\n} from 'components/LoginForm/LoginForm.styled';\n\nimport operations from 'redux/session/sessionOperations';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [isRevealPwd, setIsRevealPwd] = useState(false);\n\n  const schema = yup.object().shape({\n    email: yup.string().email().required(),\n    password: yup\n      .string()\n      .min(6, 'must be at least 6 characters')\n      // .max(16, 'password length must be less than 17 characters')\n      .matches(\n        /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$/,\n        'must contain 1 letter, and 1 number'\n      )\n      .required(),\n  });\n\n  const onSubmit = (values, { resetForm }) => {\n    const res = dispatch(operations.logIn(values));\n\n    if (res.error && res.payload === 401) {\n      toast.warning('Email or password is wrong');\n      return;\n    } else if (res.error) {\n      toast.warning('Sorry, something is wrong, please, try again');\n      return;\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={schema}\n      onSubmit={onSubmit}\n    >\n      {({ handleSubmit, handleChange, values }) => (\n        <FormContainer>\n          <Form onSubmit={handleSubmit}>\n            <LogoContainer>\n              <Logo />\n            </LogoContainer>\n            <FormLabel>\n              <FormField\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"E-mail\"\n              />\n              <IconMail />\n              <ErrorMessage\n                name=\"email\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n\n            <FormLabel>\n              <FormField\n                type={isRevealPwd ? 'text' : 'password'}\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                placeholder=\"Password\"\n              />\n              <IconPassword />\n              <ShowPwdButton\n                type=\"button\"\n                setIsRevealPwd={setIsRevealPwd}\n                isRevealPwd={isRevealPwd}\n              />\n              <ErrorMessage\n                name=\"password\"\n                render={msg => <ErrorText>{msg}</ErrorText>}\n              />\n            </FormLabel>\n            <FirstButton type=\"submit\">Log In</FirstButton>\n            <SecondButton\n              type=\"button\"\n              onClick={() => {\n                navigate('/register');\n              }}\n            >\n              Register\n            </SecondButton>\n          </Form>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport Media from 'react-media';\nimport mediaQueries from '../../utils/media';\nimport {\n    Section,\n    PageContainer,\n    ImgContainer,\n    ImgWrapperLogin,\n    Title,\n    FormWrapper,\n} from './AuthPages.styled';\n\nconst LoginPage = () => {\n  return (\n    <Section>\n      <PageContainer>\n         <Media queries={mediaQueries}>\n              {matches => (matches.tablet || matches.desktop) &&  <ImgContainer>\n            <ImgWrapperLogin />\n          <Title>Finance App</Title>\n        </ImgContainer>}\n            </Media>       \n              <FormWrapper>\n                <LoginForm />   \n              </FormWrapper>\n          </PageContainer>        \n     </Section>\n  );\n};\nexport default LoginPage;"],"names":["dispatch","useDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isRevealPwd","setIsRevealPwd","schema","yup","shape","email","required","password","min","matches","_jsx","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","res","operations","error","payload","toast","children","_ref2","handleSubmit","handleChange","FormContainer","_jsxs","Form","LogoContainer","Logo","FormLabel","FormField","type","name","value","onChange","placeholder","IconMail","ErrorMessage","render","msg","ErrorText","IconPassword","ShowPwdButton","FirstButton","SecondButton","onClick","Section","PageContainer","Media","queries","mediaQueries","tablet","desktop","ImgContainer","ImgWrapperLogin","Title","FormWrapper","LoginForm"],"sourceRoot":""}